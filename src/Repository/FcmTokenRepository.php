<?php

namespace App\Repository;

use App\Entity\FcmToken;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * FcmTokenRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FcmTokenRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $managerRegistry)
    {
        parent::__construct($managerRegistry, FcmToken::class);
    }

    public function findAllTokensOfUser($user) {
        $qb = $this->createQueryBuilder('a');
        $qb
            ->andWhere('a.user = :user')
            ->orderBy('a.id', 'DESC')
            ->setParameters([
                'user' => $user
            ])
        ;
        return $qb->getQuery()->getResult();
    }

    public function findlastTokensOfUser($user) {
        $qb = $this->createQueryBuilder('a');
        $qb
            ->andWhere('a.user = :user')
            ->setMaxResults(3)
            ->orderBy('a.id', 'DESC')
            ->setParameters([
                'user' => $user
            ])
        ;
        return $qb->getQuery()->getResult();
    }

    public function findTokensOfUsers($users) {
        $qb = $this->createQueryBuilder('a');
        $qb ->select('a.id', 'a.fcmToken as token', 'u.id as userId')
            ->andWhere('a.user in (:users)')
            ->leftJoin('a.user', 'u')
            ->orderBy('a.id', 'DESC')
            ->setParameters([
                'users' => $users
            ])
        ;
        $results = $qb->getQuery()->getResult();
        //limit at one per user
        $sendToUserIds = [];
        $tokenList = [];
        foreach ($results as $result) {
            if(!in_array($result['userId'], $sendToUserIds)) {
                $sendToUserIds[] = $result['userId'];
                $tokenList[] = $result['token'];
            }
        }
        return $tokenList;
    }


    public function deleteToken($userToken)
    {
        $qb = $this->createQueryBuilder('a');
        $qb ->delete()
            ->andWhere('a.fcmToken = :userToken')
            ->setParameters([
                'userToken' => $userToken
            ]);
        return $qb->getQuery()->execute();
    }
}
